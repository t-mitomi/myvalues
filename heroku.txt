0.
herokuに新規登録
https://jp.heroku.com/

1.
Gitの設定。

2.
#SUNABACO テキスト
docs.google.com/document/d/10Qe9sB3aZcTvXTDgWOyOBl1xBqh7LOkFtia_-K1YAPE/edit?

3.
卒業制作フォルダをターミナルで 以下macはpip＝＞pip3
terminalで
pip install gunicorn
pip freeze
＃gunicorn==20.1.0等
windowsでなければ
gunicorm app:appでhttp://127.0.0.1:8000/へ

4.
https://devcenter.heroku.com/ja/articles/heroku-cli#download-and-install
(HEROKU をコマンド経由で操作するためのアプリケーション)
からHeroku CLIをダウンロードしてインストール
すると、コマンドラインでherokuを操作できる。
ただし、macOSの人は
brew tap heroku/brew && brew install heroku
?
windowsの人は
terminalで
heroku login
heroku: Press any key to open up the browser to login or q to exit:とメッセージ。
qで終了せずに、Enterキーなど。
VScodeの場合は再起動しないとログインできないこともある。
HerokuCLIにログインしようとすると、ログインするボタンがブラウザにブラウザに！表示される。
成功すると Logged In とブラウザ。

5.
Procfileを作成する（app.pyと同階層に大文字のPから）
中はgunicorn ファイル名:アプリ名 --log-file=-
web: gunicorn app:app --log-file=-

6.
「requirements.txt」というファイルを作成
terminalで
pip freeze > requirements.txt
「requirements.txt」というファイル名は Python で世界的にパッケージ管理のファイル名として使われている名称

7.
herokuのログイン
new create

8.
gitでinit add commit済みディレクトリで作業
herokuのSettingメニューのHeroku git URLをコピーして、
terminalで
git remote add heroku https://git.heroku.com/myvaluelist.git
git remote -v
で確認。
PS D:\myvalues> git remote -v
heroku  https://git.heroku.com/myvaluelist.git (fetch)
heroku  https://git.heroku.com/myvaluelist.git (push)
origin  https://github.com/t-mitomi/myvalues.git (fetch)
origin  https://github.com/t-mitomi/myvalues.git (push)
と、herokuとoriginが２つずつ
git add .
git commit -m "remoto heroku"
git push heroku master
又は
git push heroku main
?
To https://git.heroku.com/myvaluelist.git
 ! [remote rejected] master -> master (pre-receive hook declined)
error: failed to push some refs to 'https://git.heroku.com/myvaluelist.git'
とエラーがでたら、https://qiita.com/teipoi/items/c0f39ff14fb7bd60ebf2
結論 バージョンに注意
% heroku stack:set heroku-18 -a アプリケーション名
を実行してから再度git push heroku masterすると解決しました。
なので
terminalで
heroku stack:set heroku-20 -a app
からの再度git push heroku master
2021年1月にHerokuのstackと呼ばれるサービスのverが18→20に更新された

 !    You do not have access to the app app.
PS D:\myvalues> git push heroku master
Enumerating objects: 694, done.
Counting objects: 100% (694/694), done.
Delta compression using up to 12 threads
Compressing objects: 100% (383/383), done.
Writing objects: 100% (694/694), 1.09 MiB | 602.00 KiB/s, done.
Total 694 (delta 364), reused 465 (delta 254), pack-reused 0
remote: Compressing source files... done.
remote: Building source:
remote: 
remote: -----> Building on the Heroku-20 stack
remote: -----> Determining which buildpack to use for this app
remote: -----> Python app detected
remote: -----> No Python version was specified. Using the buildpack default: python-3.9.6
remote:        To use a different version, see: https://devcenter.heroku.com/articles/python-runtimes 
remote: -----> Installing python-3.9.6
remote: -----> Installing pip 20.2.4, setuptools 47.1.1 and wheel 0.36.2
remote: -----> Installing SQLite3
remote: -----> Installing requirements with pip
remote:        Collecting click==7.1.2
remote:          Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)
remote:        Collecting Flask==1.1.2
remote:          Downloading Flask-1.1.2-py2.py3-none-any.whl (94 kB)
remote:        Collecting gunicorn==20.1.0
remote:          Downloading gunicorn-20.1.0-py3-none-any.whl (79 kB)
remote:        Collecting itsdangerous==1.1.0
remote:          Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
remote:        Collecting Jinja2==2.11.3
remote:          Downloading Jinja2-2.11.3-py2.py3-none-any.whl (125 kB)
remote:        Collecting MarkupSafe==1.1.1
remote:          Downloading MarkupSafe-1.1.1-cp39-cp39-manylinux2010_x86_64.whl (32 kB)
remote:        Collecting Werkzeug==1.0.1
remote:          Downloading Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
remote:        Installing collected packages: click, Werkzeug, itsdangerous, MarkupSafe, Jinja2, Flask, gunicorn
remote:        Successfully installed Flask-1.1.2 Jinja2-2.11.3 MarkupSafe-1.1.1 Werkzeug-1.0.1 click-7.1.2 gunicorn-20.1.0 itsdangerous-1.1.0
remote: -----> Discovering process types
remote:        Procfile declares types -> web
remote:
remote: -----> Compressing...
remote:        Done: 53.5M
remote: -----> Launching...
remote:        Released v3
remote:        https://myvaluelist.herokuapp.com/ deployed to Heroku
remote:
remote: Verifying deploy... done.
To https://git.heroku.com/myvaluelist.git
 * [new branch]      master -> master
PS D:\myvalues> 
で 無事
https://https://myvaluelist.herokuapp.com/index

で成功。



参考：
＃SUNABACO https://docs.google.com/document/d/10Qe9sB3aZcTvXTDgWOyOBl1xBqh7LOkFtia_-K1YAPE/edit#
には写真もあり。以下は文字のみ

flaskアプリケーションのheroku公開までの手順

スクリーン リーダーのサポートを有効にするには、Ctrl+Alt+Z を押します。キーボード ショートカットの詳細については、Ctrl+スラッシュ を押します。
※‌ ‌$‌ ‌は‌ ‌ター‌ミ‌ナ‌ル、‌コ‌マ‌ン‌ド‌プ‌ロ‌ン‌プ‌ト‌ ‌に‌入‌力‌し‌て‌い‌る‌意‌味‌を‌表‌し‌ま‌す。‌ ‌
１‌．‌ア‌プ‌リ‌ケー‌ショ‌ン‌サー‌バー‌の‌イ‌ン‌ス‌トー‌ル‌ ‌
本‌番‌環‌境‌で‌ ‌Flask‌ ‌ア‌プ‌リ‌ケー‌ショ‌ン‌を‌使‌用‌す‌る‌と‌き‌は‌(今‌回‌は)‌ ‌gunicorn‌ ‌を‌使‌い‌ま‌す。‌ ‌
Flask‌に‌限‌ら‌ず、‌Django‌と‌い‌う‌フ‌レー‌ム‌ワー‌ク‌ ‌
を‌使っ‌た‌ア‌プ‌リ‌ケー‌ショ‌ン‌で‌も‌同‌じ‌で‌す。‌ ‌
な‌ぜ、‌Flask‌や‌Django‌の‌デ‌フォ‌ル‌ト‌の‌ア‌プ‌リ‌ケー‌ショ‌ン‌サー‌バー‌を‌使‌用‌し‌な‌い‌か‌と‌い‌う‌と‌ ‌
gunicorn‌ ‌の‌ほ‌う‌が‌動‌作‌が‌速‌い‌か‌ら‌で‌す。‌ ‌
 ‌
こ‌こ‌で‌は‌詳‌し‌く‌は‌説‌明‌し‌ま‌せ‌ん。‌下‌記‌参‌考‌に‌し‌て‌く‌だ‌さ‌い。‌ ‌
https://blog.hirokiky.org/entry/2018/10/06/151830?utm_source=feed‌ ‌
キー‌ワー‌ド‌参‌考‌：‌「‌gunicorn‌ ‌wsgi‌ ‌速‌さ」‌「‌wsgi‌」‌「ア‌プ‌リ‌ケー‌ショ‌ン‌サー‌バー」‌ ‌
 ‌
$‌ ‌pip3‌ ‌install‌ ‌gunicorn‌ ‌
 ‌
#‌も‌し‌く‌は‌ ‌
 ‌
$‌ ‌pip‌ ‌install‌ ‌gunicorn‌ ‌
 ‌
イ‌ン‌ス‌トー‌ル‌が‌終‌わ‌る‌と‌ ‌gunicorn‌ ‌と‌い‌う‌コ‌マ‌ン‌ド‌が‌使‌え‌る‌よ‌う‌に‌な‌り‌ま‌す。‌試‌し‌に‌ ‌
gunicorn‌ ‌を‌用‌い‌て‌ ‌Flask‌ア‌プ‌リ‌ケー‌ショ‌ン‌で‌を‌起‌動‌し‌て‌み‌ま‌しょ‌う。‌ ‌
 ‌
#‌ ‌Windows‌上‌で‌は‌gunicorn‌を‌動‌か‌す‌こ‌と‌が‌で‌き‌ま‌せ‌ん。‌ ‌
#‌ ‌し‌た‌がっ‌て、‌Windows‌の‌方‌は‌こ‌の‌項‌目‌を‌ス‌キッ‌プ‌し‌て‌も‌らっ‌て‌OK‌で‌す‌ ‌
 ‌
$‌ ‌cd‌ ‌Flask‌の‌ア‌プ‌リ‌の‌ディ‌レ‌ク‌ト‌リ‌ ‌
  ‌(Flask‌ア‌プ‌リ‌の‌ディ‌レ‌ク‌ト‌リ‌へ‌移‌動)‌ ‌
 ‌
$‌ ‌gunicorn‌ ‌ファ‌イ‌ル‌名:‌ア‌プ‌リ‌名‌ ‌
 ‌
#‌ ‌例‌：‌ ‌index.py‌ ‌と‌い‌う‌ファ‌イ‌ル‌で‌ ‌app‌ ‌=‌ ‌Flask(__name__)‌ ‌と‌記‌述‌し‌て‌い‌る‌場‌合‌ ‌
$‌ ‌gunicorn‌ ‌index:app‌ ‌#‌ ‌拡‌張‌子‌は‌い‌れ‌ま‌せ‌ん‌ ‌
 ‌
下‌記‌画‌像‌を‌参‌考‌に‌し‌て‌く‌だ‌さ‌い。‌ ‌
 ‌
 ‌
gunicorn‌ ‌ファ‌イ‌ル‌名:‌ア‌プ‌リ‌名‌ ‌コ‌マ‌ン‌ド‌の‌説‌明‌ ‌
 ‌
 ‌
エ‌ラー‌な‌く‌実‌行‌で‌き‌る‌と、‌gunicorn‌ア‌プ‌リ‌ケー‌ショ‌ン‌サー‌バー‌が‌起‌動‌し、‌ ‌
http://127.0.0.1:8000/‌‌ ‌の‌ア‌ド‌レ‌ス‌で‌ア‌プ‌リ‌を‌見‌る‌こ‌と‌が‌で‌き‌ま‌す。‌ ‌
 ‌
 ‌
２‌．‌Git‌の‌設‌定‌ ‌
 ‌
ター‌ミ‌ナ‌ル、‌コ‌マ‌ン‌ド‌プ‌ロ‌ン‌プ‌ト‌で‌git‌が‌入っ‌て‌い‌る‌か‌確‌認‌し‌て‌み‌よ‌う。‌ ‌
今‌回‌は、‌バー‌ジョ‌ン‌の‌違‌い‌は‌は‌気‌に‌せ‌ず‌進‌め‌ま‌す。‌ ‌
 ‌
$‌ ‌git‌ ‌--version‌ ‌
git‌ ‌version‌ ‌2.20.1‌ ‌(Apple‌ ‌Git-117)‌ ‌#‌ ‌git‌が‌入っ‌て‌い‌る‌と‌バー‌ジョ‌ン‌が‌返っ‌て‌く‌る‌ ‌
 ‌
２‌−‌１‌．‌git‌が‌入っ‌て‌い‌な‌い‌場‌合‌(Windows)‌ ‌
下‌記、‌参‌考‌に‌さ‌せ‌て‌い‌た‌だ‌き‌ま‌す！‌ ‌
【初‌心‌者‌向‌け】‌Git‌の‌イ‌ン‌ス‌トー‌ル‌方‌法‌を‌わ‌か‌り‌易‌く‌解‌説‌（画‌面‌付‌き）‌ ‌
https://eng-entrance.com/git-install‌ ‌
２‌−‌２‌．‌git‌の‌設‌定‌ ‌
name‌と‌email‌に‌自‌分‌の‌情‌報‌を‌設‌定‌し‌よ‌う。‌こ‌れ‌は‌誰‌が‌git‌の‌操‌作‌を‌行っ‌た‌か‌わ‌か‌る‌よ‌う‌に‌署‌名‌
み‌た‌い‌な‌も‌の‌で‌す。‌ ‌
緑‌色‌‌の‌部‌分‌を‌自‌分‌の‌情‌報‌に‌書‌き‌換‌え‌て‌か‌ら‌実‌行‌し‌て‌く‌だ‌さ‌い。‌ ‌
$‌ ‌git‌ ‌config‌ ‌--global‌ ‌user.name‌ ‌‌"Yosuke‌ ‌Itomura"‌ ‌
$‌ ‌git‌ ‌config‌ ‌--global‌ ‌user.email‌ ‌‌"itomura@hanahanaworks.com"‌ ‌
 ‌
入‌力‌し‌た‌情‌報‌を‌確‌認‌し‌た‌い‌場‌合‌は‌下‌記‌コ‌マ‌ン‌ド‌で‌確‌認‌で‌き‌ま‌す。‌ ‌
 ‌
$‌ ‌git‌ ‌config‌ ‌--list‌ ‌
 ‌
~‌ ‌省‌略‌ ‌~‌ ‌
user.name=Yosuke‌ ‌Itomura‌ ‌
user.email=‌itomura@hanahanaworks.com‌ ‌
~‌ ‌省‌略‌ ‌~‌ ‌
 ‌
 ‌
 ‌
 ‌
 ‌
 ‌
 ‌
 ‌
３‌．‌HEROKU‌へ‌登‌録‌ ‌
https://jp.heroku.com/‌ ‌
 ‌
HEROKU‌ ‌CLI‌ ‌の‌イ‌ン‌ス‌トー‌ル‌ ‌
(HEROKU‌ ‌を‌コ‌マ‌ン‌ド‌経‌由‌で‌操‌作‌す‌る‌た‌め‌の‌ア‌プ‌リ‌ケー‌ショ‌ン)‌ ‌
https://devcenter.heroku.com/articles/heroku-cli‌ ‌
 ‌
HEROKU‌ ‌CLI‌ ‌の‌イ‌ン‌ス‌トー‌ル‌ま‌で‌終‌わっ‌た‌ら、‌ター‌ミ‌ナ‌ル、‌コ‌マ‌ン‌ド‌プ‌ロ‌ン‌プ‌ト‌で‌ ‌heroku‌
に‌ロ‌グ‌イ‌ン‌し‌て‌く‌だ‌さ‌い。‌後‌ほ‌ど、‌ロ‌グ‌イ‌ン‌済‌み‌で‌な‌い‌と‌出‌来‌な‌い‌操‌作‌が‌あ‌り‌ま‌す。‌ ‌
 ‌
 ‌$‌ ‌heroku‌ ‌login‌ ‌
 ‌
 ‌
４‌．‌HEROKU‌に‌アッ‌プ‌す‌る‌た‌め‌に‌必‌要‌な‌ファ‌イ‌ル‌作‌成‌ ‌
 ‌
４‌−‌１‌．‌「‌Procfile‌」‌と‌い‌う‌ファ‌イ‌ル‌を‌作‌成‌ ‌
作‌成‌す‌る‌場‌所‌は、‌Flask‌ア‌プ‌リ‌の‌ファ‌イ‌ル‌が‌あ‌る‌ディ‌レ‌ク‌ト‌リ‌で‌す。‌ ‌
VSCode‌で‌「‌Procfile‌」‌と‌い‌う‌名‌称‌の‌ファ‌イ‌ル‌を‌作‌成‌し‌ま‌す。‌※‌拡‌張‌子‌は‌無‌し‌で‌す。‌ ‌
 ‌
Procfile‌ ‌と‌い‌う‌ファ‌イ‌ル‌を‌作‌成‌し‌た‌後‌に‌下‌記‌を‌Procfile‌の‌中‌に‌記‌述‌し‌て‌く‌だ‌さ‌い‌ ‌
 ‌
web:‌ ‌gunicorn‌ ‌ファ‌イ‌ル‌名:‌ア‌プ‌リ‌名‌ ‌--‌log‌-file=-‌ ‌
 ‌
こ‌れ‌は‌ ‌HEROKU‌ ‌の‌サー‌バー‌へ‌アッ‌プ‌し‌た‌際‌に、‌ア‌プ‌リ‌ケー‌ショ‌ン‌を‌自‌動‌で‌起‌動‌す‌る‌た‌め‌の‌ ‌
コ‌マ‌ン‌ド‌と‌なっ‌て‌い‌ま‌す‌ ‌
４‌−‌２‌．‌「‌requirements.txt‌」‌と‌い‌う‌ファ‌イ‌ル‌を‌作‌成‌ ‌
下‌記‌コ‌マ‌ン‌ド‌を‌入‌力‌し‌て‌み‌て‌く‌だ‌さ‌い。‌ ‌
 ‌
$‌ ‌pip3‌ ‌freeze‌ ‌
 ‌
#‌も‌し‌く‌は‌ ‌
 ‌
$‌ ‌pip‌ ‌freeze‌ ‌
 ‌
 ‌
pip3‌ ‌で‌イ‌ン‌ス‌トー‌ル‌し‌た‌パッ‌ケー‌ジ‌一‌覧‌と‌バー‌ジョ‌ン‌が‌ ‌==‌ ‌で‌くっ‌つ‌い‌た‌状‌態‌で‌しゅ‌つ‌りょ‌
く‌さ‌れ‌ま‌す。‌ ‌
こ‌れ‌は、‌ア‌プ‌リ‌ケー‌ショ‌ン‌を‌別‌の‌環‌境‌へ‌移‌動‌す‌る‌と‌き‌（別‌の‌パ‌ソ‌コ‌ン、‌サー‌バー）‌に‌必‌要‌に‌
な‌る‌情‌報‌で‌す。‌こ‌れ‌を‌ファ‌イ‌ル‌と‌し‌て‌保‌存‌し‌ま‌す。‌ ‌
下‌記‌コ‌マ‌ン‌ド‌で‌作‌成‌す‌る‌の‌が‌一‌般‌的‌で‌す。‌ ‌「‌requirements.txt‌」‌と‌い‌う‌ファ‌イ‌ル‌名‌は‌ ‌Python‌ ‌
で‌世‌界‌的‌に‌パッ‌ケー‌ジ‌管‌理‌の‌ファ‌イ‌ル‌名‌と‌し‌て‌使‌わ‌れ‌て‌い‌る‌名‌称‌な‌の‌で、‌そ‌れ‌に‌合‌わ‌せ‌て‌ま‌
す。‌な‌の‌で‌こ‌の‌ファ‌イ‌ル‌を‌み‌れ‌ば‌ど‌の‌パッ‌ケー‌ジ‌を‌使‌用‌し‌て‌い‌る‌か‌が‌わ‌か‌る‌と‌い‌う‌こ‌と‌で‌
す。‌ファ‌イ‌ル‌名‌間‌違‌う‌と‌エ‌ラー‌に‌な‌る‌の‌で‌間‌違‌わ‌な‌い‌よ‌う‌に‌し‌て‌く‌だ‌さ‌い。‌ ‌
実‌行‌す‌る‌コ‌マ‌ン‌ド‌の‌場‌所‌は‌ ‌4-1‌ ‌の‌ ‌Procfile‌の‌場‌所‌と‌同‌じ‌で‌す‌ ‌
 ‌
$‌ ‌cd‌ ‌Flask‌の‌ア‌プ‌リ‌の‌ディ‌レ‌ク‌ト‌リ‌ ‌
  ‌(Flask‌ア‌プ‌リ‌の‌ディ‌レ‌ク‌ト‌リ‌へ‌移‌動)‌ ‌
$‌ ‌pip3‌ ‌freeze‌ ‌>‌ ‌requirements.txt‌ ‌
 ‌
#‌も‌し‌く‌は‌ ‌
 ‌
$‌ ‌pip‌ ‌freeze‌ ‌>‌ ‌requirements.txt‌ ‌
 ‌
こ‌こ‌ま‌で‌で‌き‌た‌ら‌準‌備‌Ok‌ ‌
 ‌
 ‌
継‌続‌的‌に‌学‌習‌を‌続‌け‌て‌い‌く‌に‌は‌ ‌
ター‌ミ‌ナ‌ル、‌コ‌マ‌ン‌ド‌プ‌ロ‌ン‌プ‌ト‌に‌何‌か‌し‌ら‌を‌入‌力‌し‌た‌際‌に、‌何‌か‌し‌ら‌反‌応‌が‌合っ‌た‌場‌合‌は‌
必‌ず‌読‌み‌ま‌しょ‌う。‌解‌決‌の‌た‌め‌の‌ヒ‌ン‌ト‌が‌書‌か‌れ‌て‌い‌ま‌す。‌




